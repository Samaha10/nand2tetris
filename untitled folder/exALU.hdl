// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    // zx
    Not16(in=zx, out[0..15]=notzx);
    And16(a=x, b=notzx, out=x);

    //nx
    Not16(in=x, out[0..15]=notx);
    // single 1,  0 could be passed to 16 no need for not16
    Not16(in=nx, out[0..15]=notnx);
    And16(a=x, b=notnx, out[0..15]=w);
    And16(a=notx, b=nx, out[0..15]=v);
    Or16(a=w, b=v, out=x);

    // zy
    Not16(in=zy, out[0..15]=notzy);
    And16(a=y, b=notzy, out=y);

    // ny
    Not16(in=y, out[0..15]=noty);
    Not(in=ny, out=notny);
    And16(a=y, b=notny, out[0..15]=m);
    And16(a=noty, b=ny, out[0..15]=n);
    Or16(a=m, b=n, out=y);

    // f
    Add16(a=x, b=y, out[0..15]=xyplus);
    And16(a=x, b=y, out[0..15]=xandy);
    Not(in=f, out=notf);
    And16(a=xyplus, b=f, out[0..15]=q);
    And16(a=xandy, b=notf, out[0..15]=t);
    Or16(a=q, b=t, out=out);

    // no
    Not16(in=out, out[0..15]=notout);
    Not(in=no, out=notno);
    And16(a=out, b=notno, out[0..15]=o);
    And16(a=notout, b=no, out[0..15]=p);
    Or16(a=o, b=p, out=out);

    // zr
    Or8Way(in=out[0..7], out=e1);
    Or8Way(in=out[8..15], out=e2);
    Or(a=e1, b=e2, out=e3);
    Not(in=e3, out=zr);

    // ng
    And(a=out[15], b=true, out=ng);



}